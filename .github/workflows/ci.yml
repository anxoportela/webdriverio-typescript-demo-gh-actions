name: WebDriverIO CI 🚀

on:
  workflow_dispatch:
    inputs:
      trigger:
        description: "Trigger the workflow (set to true)"
        required: true
        default: "false"
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 * * * *" # Disparar cada hora

jobs:
  test:
    runs-on: ubuntu-latest # Usar el runner más reciente de Ubuntu

    steps:
      - name: Checkout repository 🛠️ # Hacer checkout del repositorio
        uses: actions/checkout@v4

      - name: Set up Node.js 🧑‍💻 # Configurar el entorno de Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Cache Node.js modules 💾 # Cachear los módulos de Node.js para acelerar el proceso
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            node-

      - name: Install dependencies 📦 # Instalar las dependencias de forma limpia
        run: npm ci

      - name: Run WebDriverIO tests 🧪 # Ejecutar las pruebas de WebDriverIO
        run: npx wdio run wdio.conf.ts

      - name: Upload Allure Results 📤 # Subir los resultados de Allure como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: ./reports/allure-results

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: success()
    permissions:
      contents: write

    steps:
      - name: Checkout repository 🛠️ # Hacer checkout del repositorio
        uses: actions/checkout@v4

      - name: Checkout allure-results branch 🌳 # Hacer checkout de la rama allure-results
        run: |
          git fetch origin allure-results  # Obtener la rama allure-results
          git checkout -b allure-results --track origin/allure-results || git checkout allure-results

      - name: Set Git user identity 🧑‍💼 # Configurar la identidad de Git para los commits
        run: |
          git config --global user.email "actions@github.com"  # Establecer el correo
          git config --global user.name "GitHub Actions"  # Establecer el nombre de usuario

      - name: Create test-history directory 🗂️ # Crear la carpeta para almacenar los resultados
        run: mkdir -p ./test-history

      - name: Download Allure results 📥 # Descargar los resultados de Allure del trabajo de pruebas
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: ./new-results

      - name: Create timestamped directory 🕒 # Crear un directorio con una marca de tiempo para los resultados
        run: |
          timestamp=$(date +'%Y-%m-%d_%H-%M-%S')  # Generar la marca de tiempo
          mkdir -p "./test-history/$timestamp/allure-results"  # Crear el directorio con la marca de tiempo
          cp -r ./new-results/* "./test-history/$timestamp/allure-results"  # Copiar los resultados al directorio con la marca de tiempo

      - name: Install Allure CLI 🛠️ # Instalar Allure CLI para generar los informes
        run: npm install -g allure-commandline --save-dev

      - name: Generate Allure report 📊 # Generar el informe de Allure con los resultados históricos
        run: |
          allure generate ./test-history/*/allure-results --clean -o ./allure-report  # Generar el informe de Allure

      - name: Commit Allure results 📑 # Hacer commit y push de los resultados actuales a la rama allure-results
        run: |
          git add ./test-history/$timestamp  # Agregar los cambios
          git commit -m "Add Allure results for $timestamp"  # Hacer commit de los cambios
          git push origin allure-results  # Hacer push a la rama allure-results

      - name: Deploy Allure Report 🚀 # Desplegar el informe de Allure en GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          publish_dir: ./allure-report
          publish_branch: gh-pages
